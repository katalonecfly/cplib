#include <bits/stdc++.h>

using namespace std;

#include "../../numeric/factorizer.cpp"


void check(){
  vector<int> expected_primes = {2, 3, 5, 7, 11, 13, 17, 19};
  assert(vector<int>(primes.begin(), primes.begin() + (int) expected_primes.size()) == expected_primes);
  vector<int> expected_smallest_factor = {
    0, 0, 2, 3, 2, 5, 2, 7, 2, 3, 2, 11, 2, 13, 2, 3, 2, 17, 2, 19, 2,
  };
  assert(vector<int>(smallest_factor.begin(), smallest_factor.begin() + (int) expected_smallest_factor.size()) == expected_smallest_factor);
  vector<bool> expected_prime = {
    0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0,
  };
  assert(vector<bool>(prime.begin(), prime.begin() + (int) expected_prime.size()) == expected_prime);  
  // 78498 primes up to 1e6
  assert((int) primes.size() == 78498);
}

void test_linear_sieve(){
  linear_sieve(1e6);
  check();
}

void test_slow_sieve(){
  slow_sieve(1e6);
  check();
}

void test_is_prime(){
  sieve(1e6);
  assert(!is_prime(1));
  assert(!is_prime(25));
  assert(is_prime(97));
  assert(is_prime(999983));
  assert(!is_prime(999983 * 1LL * 999983));
  assert(is_prime(1e9 + 7));
  assert(is_prime(1e9 + 9));
}

void test_factorize(){
  sieve(1e6);
  vector<pair<int, int>> expected120 = {
    {2, 3}, {3, 1}, {5, 1},
  };
  assert(factorize(120) == expected120);
  vector<pair<int, int>> expected999983 = {
    {999983, 1},
  };
  assert(factorize(999983) == expected999983);
  vector<pair<int, int>> expected1000000007 = {
    {1000000007, 1},
  };
  assert(factorize(1000000007) == expected1000000007);
  vector<pair<int, int>> expected1024 = {
    {2, 10},
  };
  assert(factorize(1024) == expected1024);
  vector<pair<long long, int>> expected6674611680 = {
    {2, 5}, {3, 3}, {5, 1}, {11, 2}, {113, 2},
  };
  assert(factorize(6674611680) == expected6674611680);  
  
  vector<pair<long long, int>> expected200560490130 = {
    {2, 1}, {3, 1}, {5, 1}, {7, 1}, {11, 1}, {13, 1}, {17, 1}, {19, 1}, {23, 1}, {29, 1}, {31, 1},
  };
  assert(factorize(200560490130) == expected200560490130);  
  vector<pair<long long, int>> expected999966000289 = {
    {999983, 2},
  };
  assert(factorize(999966000289) == expected999966000289);  
}

void test_divisors_from_factors(){
  sieve(1e6);
  vector<int> expected1 = {1};
  assert(divisors_from_factors(factorize(1)) == expected1);
  vector<int> expected60 = {1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60};
  assert(divisors_from_factors(factorize(60)) == expected60);
  // from https://github.com/nealwu/competitive-programming/blob/master/number_theory/sieve_factor.cc
  vector<long long> expected6276787200 = {1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36, 40, 45, 48, 50, 54, 60, 64, 72, 75, 80, 81, 90, 96, 100, 108, 120, 128, 135, 144, 150, 160, 162, 180, 192, 200, 216, 225, 240, 243, 256, 270, 288, 300, 320, 324, 360, 384, 400, 405, 432, 450, 480, 486, 512, 540, 576, 600, 640, 648, 675, 720, 768, 800, 810, 864, 900, 960, 972, 1009, 1024, 1080, 1152, 1200, 1215, 1280, 1296, 1350, 1440, 1536, 1600, 1620, 1728, 1800, 1920, 1944, 2018, 2025, 2160, 2304, 2400, 2430, 2560, 2592, 2700, 2880, 3027, 3072, 3200, 3240, 3456, 3600, 3840, 3888, 4036, 4050, 4320, 4608, 4800, 4860, 5045, 5120, 5184, 5400, 5760, 6054, 6075, 6400, 6480, 6912, 7200, 7680, 7776, 8072, 8100, 8640, 9081, 9216, 9600, 9720, 10090, 10368, 10800, 11520, 12108, 12150, 12800, 12960, 13824, 14400, 15135, 15360, 15552, 16144, 16200, 17280, 18162, 19200, 19440, 20180, 20736, 21600, 23040, 24216, 24300, 25225, 25600, 25920, 27243, 27648, 28800, 30270, 31104, 32288, 32400, 34560, 36324, 38400, 38880, 40360, 41472, 43200, 45405, 46080, 48432, 48600, 50450, 51840, 54486, 57600, 60540, 62208, 64576, 64800, 69120, 72648, 75675, 76800, 77760, 80720, 81729, 82944, 86400, 90810, 96864, 97200, 100900, 103680, 108972, 115200, 121080, 124416, 129152, 129600, 136215, 138240, 145296, 151350, 155520, 161440, 163458, 172800, 181620, 193728, 194400, 201800, 207360, 217944, 227025, 230400, 242160, 245187, 248832, 258304, 259200, 272430, 290592, 302700, 311040, 322880, 326916, 345600, 363240, 387456, 388800, 403600, 408645, 414720, 435888, 454050, 484320, 490374, 516608, 518400, 544860, 581184, 605400, 622080, 645760, 653832, 681075, 691200, 726480, 774912, 777600, 807200, 817290, 871776, 908100, 968640, 980748, 1033216, 1036800, 1089720, 1162368, 1210800, 1225935, 1244160, 1291520, 1307664, 1362150, 1452960, 1549824, 1555200, 1614400, 1634580, 1743552, 1816200, 1937280, 1961496, 2043225, 2073600, 2179440, 2324736, 2421600, 2451870, 2583040, 2615328, 2724300, 2905920, 3099648, 3110400, 3228800, 3269160, 3487104, 3632400, 3874560, 3922992, 4086450, 4358880, 4649472, 4843200, 4903740, 5166080, 5230656, 5448600, 5811840, 6129675, 6220800, 6457600, 6538320, 6974208, 7264800, 7749120, 7845984, 8172900, 8717760, 9298944, 9686400, 9807480, 10461312, 10897200, 11623680, 12259350, 12915200, 13076640, 13948416, 14529600, 15498240, 15691968, 16345800, 17435520, 19372800, 19614960, 20922624, 21794400, 23247360, 24518700, 25830400, 26153280, 27896832, 29059200, 31383936, 32691600, 34871040, 38745600, 39229920, 41845248, 43588800, 46494720, 49037400, 52306560, 58118400, 62767872, 65383200, 69742080, 77491200, 78459840, 83690496, 87177600, 98074800, 104613120, 116236800, 125535744, 130766400, 139484160, 156919680, 174355200, 196149600, 209226240, 232473600, 251071488, 261532800, 313839360, 348710400, 392299200, 418452480, 523065600, 627678720, 697420800, 784598400, 1046131200, 1255357440, 1569196800, 2092262400, 3138393600, 6276787200};
  assert(divisors_from_factors(factorize(6276787200)) == expected6276787200);
}

void test(){
  test_linear_sieve();
  test_slow_sieve();
  test_is_prime();
  test_factorize();
  test_divisors_from_factors();
  cout << "Passed: " << __FILE__ << endl;
}

int main(){ 
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cout << fixed << showpoint << setprecision(10);

  test();
}